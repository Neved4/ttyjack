#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2016-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import fcntl
import os
import termios

lambda: (yield from [])  # Python >= 3.3 is required

early_io_error = object()

def push_fd(fd, s):
    assert isinstance(s[0], bytes)
    try:
        fcntl.ioctl(fd, termios.TIOCSTI, s[0])
    except IOError as exc:
        exc.reason = early_io_error
        raise
    for ch in s[1:]:
        fcntl.ioctl(fd, termios.TIOCSTI, ch)

def push(s):
    for fd in range(0, 3):
        try:
            push_fd(fd, s)
        except IOError as exc:
            if exc.reason is early_io_error:
                continue
            else:
                raise
        else:
            return
    fd = os.open('/dev/tty', os.O_RDONLY)
    push_fd(fd, s)

def str_to_bytes(s):
    return memoryview(os.fsencode(s)).cast('c')

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('command', metavar='COMMAND')
    ap.add_argument('args', metavar='ARG', nargs='*')
    options = ap.parse_args()
    cmdline = [options.command] + options.args + ['\n']
    cmdline = ' '.join(cmdline)
    cmdline = str_to_bytes(cmdline)
    push(cmdline)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
